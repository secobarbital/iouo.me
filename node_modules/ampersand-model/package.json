{
  "name": "ampersand-model",
  "description": "An extension to ampersand-state that adds methods and properties for working with a RESTful API.",
  "version": "4.0.1",
  "author": {
    "name": "Henrik Joreteg",
    "email": "henrik@andyet.net"
  },
  "bugs": {
    "url": "https://github.com/ampersandjs/ampersand-model/issues"
  },
  "dependencies": {
    "ampersand-state": "^4.3.2",
    "ampersand-sync": "^2.0.0",
    "underscore": "^1.6.0"
  },
  "devDependencies": {
    "ampersand-registry": "0.x.x",
    "browserify": "~3.39.0",
    "precommit-hook": "*",
    "proxyquire": "^1.0.0",
    "run-browser": "~1.3.0",
    "tape": "~2.12.3",
    "tape-run": "~0.1.1",
    "uglify-js": "2.4.0"
  },
  "homepage": "https://github.com/ampersandjs/ampersand-model",
  "keywords": [
    "model, ampersand, state"
  ],
  "license": "MIT",
  "main": "./ampersand-model.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/ampersandjs/ampersand-model.git"
  },
  "scripts": {
    "start": "run-browser test/index.js",
    "test": "browserify test/*.js | tape-run"
  },
  "testling": {
    "files": "test/index.js",
    "browsers": [
      "ie/8..latest",
      "firefox/17..latest",
      "firefox/nightly",
      "chrome/22..latest",
      "chrome/canary",
      "opera/12..latest",
      "opera/next",
      "safari/5.1..latest",
      "ipad/6.0..latest",
      "iphone/6.0..latest",
      "android-browser/4.2..latest"
    ]
  },
  "readme": "# ampersand-model\n\n<!-- starthide -->\nPart of the [Ampersand.js toolkit](http://ampersandjs.com) for building clientside applications.\n<!-- endhide -->\n\nampersand-model is an extension built on [ampersand-state](http://ampersandjs.com/docs/#ampersand-state) to provide methods and properties that you'll often want when modeling data you get from an API.\n\nFor further explanation see the [learn ampersand-state](http://ampersandjs.com/learn/state) guide.\n\n## Installing\n\n```\nnpm install ampersand-model\n```\n\n## Observing\n\nAmpersand gets its event system from Backbone using the [backbone-events-standalone](https://www.npmjs.org/package/backbone-events-standalone) module on npm.\n\nFor more, [read all about how events work in ampersand](http://ampersandjs.com/learn/events).\n\n## Browser compatibility\n\n[![testling badge](https://ci.testling.com/ampersandjs/ampersand-model.png)](https://ci.testling.com/ampersandjs/ampersand-model)\n\n## API Reference\n\nThe module exports just one item, the ampersand-model constructor. It's has a method called `extend` that works as follows:\n\n### extend `AmpersandModel.extend({ })`\n\nTo create a **Model** class of your own, you extend **AmpersandModel** and provide instance properties and options for your class. Typically here you will pass any properties (`props`, `session`, and `derived`) of your model class, and any instance methods to be attached to instances of your class.\n\n**extend** correctly sets up the prototype chain, so that subclasses created with **extend** can be further extended as many times as you like.\n\nAs with AmpersandState, definitions like `props`, `session`, `derived` etc will be merged with superclass definitions.\n\n```javascript\nvar Person = AmpersandModel.extend({\n    props: {\n        firstName: 'string',\n        lastName: 'string'\n    },\n    session: {\n        signedIn: ['boolean', true, false],\n    },\n    derived: {\n        fullName: {\n            deps: ['firstName', 'lastName'],\n            fn: function () {\n                return this.firstName + ' ' + this.lastName;\n            }\n        }\n    }\n});\n```\n\n\n### constructor/initialize `new ExtendedAmpersandModel([attrs], [options])`\n\nThis works exactly like [state](http://ampersandjs.com/docs/#ampersand-state-constructorinitialize) with a minor addition: If you pass `collection` as part of options it'll be stored for reference.\n\nAs with AmpersandState, if you have defined an **initialize** function for your subclass of State, it will be invoked at creation time.\n\n```javascript\nvar me = new Person({\n    firstName: 'Phil'\n    lastName: 'Roberts'\n});\n\nme.firstName //=> Phil\n```\n\nAvailable options:\n\n* `[parse]` {Boolean} - whether to call the class's [parse](#ampersand-state-parse) function with the initial attributes. _Defaults to `false`_.\n* `[parent]` {AmpersandState} - pass a reference to a model's parent to store on the model.\n* `[collection]` {Collection} - pass a reference to the collection the model is in. Defaults to `undefined`.\n\n\n### save `model.save([attributes], [options])`\n\nSave a model to your database (or alternative persistence layer), by delegating to [ampersand-sync](https://github.com/ampersandjs/ampersand-sync). Returns a xhr object if validation is successful and false otherwise. The attributes hash (as in set) should contain the attributes you'd like to change — keys that aren't mentioned won't be altered — but, a *complete representation* of the resource will be sent to the server. As with `set`, you may pass individual keys and values instead of a hash. If the model has a validate method, and validation fails, the model will not be saved. If the model `isNew`, the save will be a \"create\" (HTTP POST), if the model already exists on the server, the save will be an \"update\" (HTTP PUT).\n\nIf instead, you'd only like the changed attributes to be sent to the server, call `model.save(attrs, {patch: true})`. You'll get an HTTP PATCH request to the server with just the passed-in attributes.\n\nCalling save with new attributes will cause a `\"change\"` event immediately, a `\"request\"` event as the Ajax request begins to go to the server, and a `\"sync\"` event after the server has acknowledged the successful change. Pass `{wait: true}` if you'd like to wait for the server before setting the new attributes on the model.\n\n```javascript\nvar book = new Backbone.Model({\n  title: \"The Rough Riders\",\n  author: \"Theodore Roosevelt\"\n});\n\nbook.save();\n//=> triggers a `POST` via ampersand-sync with { \"title\": \"The Rough Riders\", \"author\": \"Theodore Roosevelt\" }\n\nbook.save({author: \"Teddy\"});\n//=> triggers a `PUT` via ampersand-sync with { \"title\": \"The Rough Riders\", \"author\": \"Teddy\" }\n```\n\n**save** accepts `success` and `error` callbacks in the options hash, which will be passed the arguments `(model, response, options)`. If a server-side validation fails, return a non-`200` HTTP response code, along with an error response in text or JSON.\n\n### fetch `model.fetch([options])`\n\nResets the model's state from the server by delegating to ampersand-sync. Returns a xhr. Useful if the model has yet to be populated with data, or you want to ensure you have the latest server state. A `\"change\"` event will be triggered if the retrieved state from the server differs from the current attributes. Accepts `success` and `error` callbacks in the options hash, which are both passed `(model, response, options)` as arguments.\n\n```javascript\nvar me = new Person({id: 123});\nme.fetch();\n```\n\n### destroy `model.destroy([options])`\n\nDestroys the model on the server by delegating an HTTP `DELETE` request to ampersand-sync. Returns the xhr object, or `false` if the model [isNew](#ampersand-model-isnew). Accepts `success` and `error` callbacks in the options hash, which are both passed `(model, response, options)` as arguments.\n\nTriggers:\n\n* a `\"destroy\"` event on the model, which will bubble up through any collections which contain it.\n* a `\"request\"` event as it begins the Ajax request to the server\n* a `\"sync\"` event, after the server has successfully acknowledged the model's deletion.\n\nPass `{wait: true}` if you'd like to wait for the server to respond before removing the model from the collection.\n\n```javascript\nvar task = new Task({ id: 123 });\ntask.destroy({\n    success: function () { alert('Task destroyed!'); },\n    error: function () { alert('There was an error destroying the task'); },\n});\n```\n\n### sync `model.sync(method, model, [options])`\n\nUses ampersand-sync to persist the state of a model to the server. Usually you won't call this directly, you'd use `save` or `destroy` instead, but it can be overriden for custom behaviour.\n\n### ajaxConfig `model.ajaxConfig or model.ajaxConfig()`\n\nampersand-sync will call ajaxConfig on your model before it makes the request to the server, and will merge in any options you return to the request. When extending your own model, set an ajaxConfig function to modify the request before it goes to the server.\n\najaxConfig can either be an object, or a function that returns an object, with the following options:\n\n* `useXDR` [boolean]: (applies to IE8/9 only with cross domain requests): signifies that this is a cross-domain request and that IE should use it's XDomainRequest object. This is required if you're making cross-domain requests and want to support IE8/9). Note that XDR doesn't support headers/withCredentials.\n* `headers` [object]: any extra headers to send with the request.\n* `xhrFields` [object]: any fields to set directly on the [XHR](https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest) request object, most typically:\n    * `withCredentials` [boolean]: whether to send cross domain requests with authorization headers/cookies. Useful if you're making cross sub-domain requests with a root-domain auth cookie.\n* `beforeSend` [function]: beforeSend will be called before the request is made, and will be passed the raw `xhr` object if you wish to modify it directly before it's sent.\n\n```javascript\nvar MyCollection = AmpersandModel.extend({\n    url: 'http://otherdomain.example.com/stuff',\n\n    ajaxConfig: function () {\n        return {\n            headers: {\n                'Access-Token': this.accessToken\n            },\n            xhrFields: {\n                'withCredentials': true\n            }\n        };\n    }\n});\n\nvar collection = new MyCollection()\ncollection.fetch();\n```\n\n# Configuring\n\n\n### url `model.url or model.url()`\n\nThe relative url the model should use to edit the resource on the server. \n\n### urlRoot `model.urlRoot or model.urlRoot()`\n\nThe base url to use for fetching this model. This is useful if the model is *not* in a collection and you still want to set a fixed \"root\" but have a dynamic model.url(). Can also be a function.\n\nIf your model is in a collection that has a `url` you won't need this, because the model will try to build the URL from its collection.\n\n```js\nvar Person = AmpersandModel.extend({\n    props: {\n        id: 'string',\n        name: 'string'\n    },\n    urlRoot: '/api/persons'\n});\n\nvar bob = new Person({id: \"1234\"});\n\nconsole.log(bob.url()); //=> \"/api/persons/1234\"\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "ampersand-model@4.0.1",
  "_from": "ampersand-model@^4.0.0"
}
