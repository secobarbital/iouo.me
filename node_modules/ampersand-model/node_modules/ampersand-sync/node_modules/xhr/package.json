{
  "name": "xhr",
  "version": "1.15.0",
  "description": "small xhr abstraction",
  "keywords": [
    "xhr",
    "http",
    "xmlhttprequest",
    "xhr2",
    "browserify"
  ],
  "author": {
    "name": "Raynos",
    "email": "raynos2@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/Raynos/xhr.git"
  },
  "main": "index",
  "homepage": "https://github.com/Raynos/xhr",
  "contributors": [
    {
      "name": "Jake Verbaten"
    }
  ],
  "bugs": {
    "url": "https://github.com/Raynos/xhr/issues",
    "email": "raynos2@gmail.com"
  },
  "dependencies": {
    "global": "~2.0.7",
    "once": "~1.1.1",
    "parse-headers": "^1.0.2"
  },
  "devDependencies": {
    "pre-commit": "0.0.9",
    "run-browser": "^1.3.1",
    "tap-spec": "^0.1.8",
    "tape": "^2.12.2"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/Raynos/xhr/raw/master/LICENSE"
    }
  ],
  "scripts": {
    "test": "run-browser test/index.js -b | tap-spec",
    "browser": "run-browser test/index.js"
  },
  "testling": {
    "files": "test/*.js",
    "browsers": [
      "ie/8..latest",
      "firefox/17..latest",
      "firefox/nightly",
      "chrome/22..latest",
      "chrome/canary",
      "opera/12..latest",
      "opera/next",
      "safari/5.1..latest",
      "ipad/6.0..latest",
      "iphone/6.0..latest",
      "android-browser/4.2..latest"
    ]
  },
  "readme": "# xhr\n\nA small xhr wrapper. Designed for use with [browserify](http://browserify.org/).\n\n[![browser support](https://ci.testling.com/raynos/xhr.png)](https://ci.testling.com/Raynos/xhr)\n\n## Example\n\n```js\nvar xhr = require(\"xhr\")\n\nxhr({\n    body: someJSONString,\n    uri: \"/foo\",\n    headers: {\n        \"Content-Type\": \"application/json\"\n    }\n}, function (err, resp, body) {\n    // resp === xhr\n    // check resp.body or resp.statusCode\n})\n```\n\n## `var req = xhr(options, callback)`\n\n```js\ntype XhrOptions = String | {\n    useXDR: Boolean?,\n    sync: Boolean?,\n    uri: String,\n    url: String,\n    method: String?,\n    timeout: Number?,\n    headers: Object?,\n    body: String?,\n    json: Object?,\n    withCredentials: Boolean?,\n    response: Boolean?\n}\nxhr := (XhrOptions, Callback<Response>) => Request\n```\nthe returned object is either an [`XMLHttpRequest`][3] instance\n    or an [`XDomainRequest`][4] instance (if on IE8/IE9 &&\n    `options.useXDR` is set to `true`)\n\nYour callback will be called once with the arguments\n    ( [`Error`][5], `response` , `body` ) where the response is depending on\n    `options.response` and body will be either\n    [`xhr.response`][6], [`xhr.responseText`][7] or\n    [`xhr.responseXML`][8] depending on the request type.\n\nYour callback will be called with an [`Error`][5] if the\n    resulting status of the request is either `0`, `4xx` or `5xx`\n\nIf `options` is a string then it's a short hand for\n    `{ method: \"GET\", uri: string }`\n\n### `options.method`\n\nSpecify the method the [`XMLHttpRequest`][3] should be opened\n    with. Passed to [`xhr.open`][2]. Defaults to \"GET\"\n\n### `options.response`\nSpecify the format of the response. Defaults to return the xhr/xdr-object\n    with body & status-properties added. When set to `true` a special response\n    object is returned that includes parsed response headers, status & body.\n    `options.response` must be set to `true` for IE8 support.\n\n### `options.useXDR`\n\nSpecify whether this is a cross origin (CORS) request for IE<10.\n    Switches IE to use [`XDomainRequest`][4] instead of `XMLHttpRequest`.\n    Ignored in other browsers.\n    \nNote that headers cannot be set on an XDomainRequest instance.\n\n### `options.sync`\n\nSpecify whether this is a synchrounous request. Note that when\n    this is true the callback will be called synchronously. In\n    most cases this option should not be used. Only use if you\n    know what you are doing!\n\n### `options.body`\n\nPass in body to be send across the [`XMLHttpRequest`][3].\n    Generally should be a string. But anything that's valid as\n    a parameter to [`xhr.send`][1] should work\n\n### `options.uri` or `options.url`\n\nThe uri to send a request too. Passed to [`xhr.open`][2]. `options.url` and `options.uri` are aliases for each other.\n\n### `options.headers`\n\nAn object of headers that should be set on the request. The\n    key, value pair is passed to [`xhr.setRequestHeader`][9]\n\n### `options.timeout`\n\nA numeric timeout to use for this xhr request. Defaults to 5\n    seconds. Ignored when `options.sync` is true.\n\n### `options.json`\n\nA valid JSON serializable value to be send to the server. If this\n    is set then we serialize the value and use that as the body.\n    We also set the Content-Type to `\"application/json\"`.\n\nAdditionally the response body is parsed as JSON\n\n### `options.withCredentials`\n\nSpecify whether user credentials are to be included in a cross-origin\n    request. Sets [`xhr.withCredentials`][10]. Defaults to false.\n    \nFor backward-compatibility defaults to true\n    when deprecated `options.cors` is also true.\n\nA wildcard `*` cannot be used in the `Access-Control-Allow-Origin` header when `withCredentials` is true. \n    The header needs to specify your origin explicitly or browser will abort the request.\n    \n\n## MIT Licenced\n\n  [1]: http://xhr.spec.whatwg.org/#the-send()-method\n  [2]: http://xhr.spec.whatwg.org/#the-open()-method\n  [3]: http://xhr.spec.whatwg.org/#interface-xmlhttprequest\n  [4]: http://msdn.microsoft.com/en-us/library/ie/cc288060(v=vs.85).aspx\n  [5]: http://es5.github.com/#x15.11\n  [6]: http://xhr.spec.whatwg.org/#the-response-attribute\n  [7]: http://xhr.spec.whatwg.org/#the-responsetext-attribute\n  [8]: http://xhr.spec.whatwg.org/#the-responsexml-attribute\n  [9]: http://xhr.spec.whatwg.org/#the-setrequestheader()-method\n  [10]: http://xhr.spec.whatwg.org/#the-withcredentials-attribute\n",
  "readmeFilename": "README.md",
  "_id": "xhr@1.15.0",
  "_from": "xhr@^1.10.0"
}
