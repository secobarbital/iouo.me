{
  "name": "key-tree-store",
  "description": "Simple tool for storing/retrieving objects events based hierarchical keypaths.",
  "version": "0.1.2",
  "author": {
    "name": "Henrik Joreteg",
    "email": "henrik@andyet.net"
  },
  "devDependencies": {
    "tape": "~2.13.1"
  },
  "keywords": [
    "events",
    "trigger",
    "keypath"
  ],
  "license": "MIT",
  "main": "key-tree-store",
  "scripts": {
    "test": "node test/*"
  },
  "readme": "# key-tree-store\n\nSimple tool for storing/retrieving objects events based hierarchical keypaths.\n\nIt lets you store and retrive objects that are at an equal or deeper key path than what you give it.\n\n## install\n\n```\nnpm install key-tree-store\n```\n\n## example\n\nAssume you've got a structure like this:\n\n```js\n{\n    'first': [ {obj: 1}, {obj: 2} ],\n    'first.stuff': [ {obj: 3} ],\n    'first.something.other': [ {obj: 4}, {obj: 5} ]\n}\n```\n\nThen you can retrive it by key. Where it returns anything at or deeper than level supplied. \n\n```javascript\nvar KeyTree = require('key-tree-store');\n\nvar tree = new KeyTree();\n\ntree.add('first', {id: 'one'});\ntree.add('first.second', {id: 'two'});\ntree.add('first.second', {id: 'three'});\ntree.add('first.second.third', {id: 'four'});\n\n// now we can retrieve them by key\ntree.get('first'); // returns all of them\ntree.get('first.second'); // returns array of objects two, three and four\ntree.get('first.second.third'); // returns array of object four;\n\n// that's all there is to it\n\n```\n\nremoving items:\n\n```javascript\nvar KeyTree = require('key-tree-store');\n\nvar tree = new KeyTree();\nvar obj1 = {obj: '1'};\n\ntree.add('key.path', obj1);\n\n// removes it no matter what key\ntree.remove(obj1);\n```\n\n## credits\n\nIf you like this follow [@HenrikJoreteg](http://twitter.com/henrikjoreteg) on twitter.\n\n## license\n\nMIT\n\n",
  "readmeFilename": "README.md",
  "_id": "key-tree-store@0.1.2",
  "_from": "key-tree-store@~0.1.0"
}
