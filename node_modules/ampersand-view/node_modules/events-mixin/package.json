{
  "name": "events-mixin",
  "version": "1.1.0",
  "component": {
    "scripts": {
      "events/index.js": "index.js"
    }
  },
  "dependencies": {
    "component-event": "^0.1.3",
    "delegate-events": "^1.1.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/HenrikJoreteg/events.git"
  },
  "readme": "\n# events-mixin\n\n  Browserify compatible fork of component/events.\n\n  Higher level dom event management with direct and delegate event handling support.\n\n  This component makes subscription management easy and unobtrusive since it does not muck with your view prototypes. Unbinding to \"clean up\" after your view is as simple as invoking `this.events.unbind()`, or more specific unbinds may be performed.\n\n  It's design to work with a \"host\" object, typically a view, that provides callbacks, making callback management much less tedious than libraries like jQuery.\n\n## Installation\n\n    $ npm install events-mixin\n\n## Example\n\n```js\nvar events = require('events-mixin');\nvar el = document.querySelector('.user');\n\nvar view = new UserView(el);\n\nfunction UserView(el) {\n  this.events = events(el, this);\n  this.events.bind('click .remove', 'remove');\n  this.events.bind('click .hide', 'hide');\n}\n\nUserView.prototype.remove = function(){\n  // remove the user\n  this.hide();\n};\n\nUserView.prototype.hide = function(){\n  // hide the view\n};\n\nUserView.prototype.destroy = function(){\n  // clean up anything you need to\n  this.events.unbind();\n};\n```\n\n## API\n\n### Events(el, obj)\n\n  Initialize a new events manager targetting the\n  given element. Methods are delegated to `obj`.\n\n### Events#bind(event, [method])\n\n  Bind direct event handlers or delegates with `event` and\n  invoke `method` when the event occurs, passing the event object.\n  When `method` is not defined the `event` name prefixed with \"on\" is used.\n\n  For example the following will invoke `onmousedown`, `onmousemove`,\n  and `onmouseup`:\n\n```js\nevents.bind('mousedown')\nevents.bind('mousemove')\nevents.bind('mouseup')\n```\n\n  Alternatively you may specify the `method` name:\n\n```js\nevents.bind('click', 'toggleDisplay')\n```\n\n  To use event delegation simply pass a selector after the\n  event name as shown here:\n\n```js\nevents.bind('click .remove', 'remove')\nevents.bind('click .close', 'hide')\n```\n\n  You may bind to the same element with several events if necessary,\n  for example here perhaps `.remove()` does not manually invoke `.hide()`:\n\n```js\nevents.bind('click .remove', 'remove')\nevents.bind('click .remove', 'hide')\nevents.bind('click .close', 'hide')\n```\n\n  Addition arguments are passed to the callee, which\n  is helpful for slight variations of a method, for\n  example sorting:\n\n```js\nevents.bind('click .sort-asc', 'sort', 'asc')\nevents.bind('click .sort-dsc', 'sort', 'dsc')\n```\n\n### Events.unbind([event], [method])\n\n  There are three flavours of unbinding -- you may unbind _all_\n  event handlers, all specific to `event`, or all specific to\n  `event` and the given `method`. For example these are all valid:\n\n```js\nevents.unbind('click', 'remove')\nevents.unbind('click', 'hide')\nevents.unbind('click')\nevents.unbind()\n```\n\n## License\n\n  MIT\n",
  "readmeFilename": "README.md",
  "description": "Browserify compatible fork of component/events.",
  "bugs": {
    "url": "https://github.com/HenrikJoreteg/events/issues"
  },
  "homepage": "https://github.com/HenrikJoreteg/events",
  "_id": "events-mixin@1.1.0",
  "dist": {
    "shasum": "3aa042070e2c1f7385f39a3685083a4f16d3a612"
  },
  "_from": "events-mixin@^1.1.0",
  "_resolved": "https://registry.npmjs.org/events-mixin/-/events-mixin-1.1.0.tgz"
}
