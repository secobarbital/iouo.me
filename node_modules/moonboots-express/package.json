{
  "name": "moonboots-express",
  "description": "Express plugin for moonboots.",
  "version": "0.1.2",
  "author": {
    "name": "Luke Karrys",
    "email": "luke@lukekarrys.com",
    "url": "http://lukekarrys.com"
  },
  "bugs": {
    "url": "https://github.com/lukekarrys/moonboots-express/issues"
  },
  "dependencies": {
    "defaults": "^1.0.0",
    "moonboots": "^2.0.6",
    "partial": "^0.0.3",
    "xtend": "^2.2.0"
  },
  "devDependencies": {
    "express": "^4.0.0",
    "jade": "^1.3.1",
    "jshint": "^2.5.0",
    "lab": "^3.0.0",
    "precommit-hook": "^0.4.1",
    "supertest": "^0.10.0"
  },
  "homepage": "https://github.com/lukekarrys/moonboots-express",
  "keywords": [
    "moonboots",
    "express"
  ],
  "license": "MIT",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git@github.com:lukekarrys/moonboots-express.git"
  },
  "scripts": {
    "test": "./node_modules/lab/bin/lab -t 100 -l",
    "start": "node sample/server"
  },
  "readme": "moonboots-express\n=================\n\n[![NPM](https://nodei.co/npm/moonboots-express.png)](https://nodei.co/npm/moonboots-express/)\n[![Build Status](https://travis-ci.org/lukekarrys/moonboots-express.png?branch=master)](https://travis-ci.org/lukekarrys/moonboots-express)\n\n**Express plugin for moonboots.**\n\nJust like [Moonboots](https://github.com/HenrikJoreteg/moonboots) but it will create the necessary HTML, JS, CSS routes for you in your Express server with the correct content-types and cache-control.\n\n\n## Install\n\n`npm install moonboots-express --save`\n\n\n## Usage\n\nCreate a new instance of `moonboots-express` and pass in the necessary options, including an express server. The `moonboots` option will be passed directly to Moonboots proper. `moonboots-express` will add the necessary routes to your express server. Outside of that, you can setup your express server however you normally would.\n\n```js\nvar Moonboots = require('moonboots-express');\nvar express = require('express');\nvar app = express();\n\n/*********\n    Configure your express app\n**********/\n\nvar moonboots = new Moonboots({\n    server: app,\n    moonboots: {\n        main: __dirname + '/clientapp/app.js'\n    }\n});\n\napp.listen(process.env.PORT);\n```\n\n\n## API\n\n- `appPath`: (default: `*`) The default is to serve the app HTML for all routes. You can pass in a path just as you would to `app.get(path)` to change it.\n- `server`: This is your Express server and it is required. `moonboots-express` will add routes for HTML and JS (and CSS if necessary).\n- `cachePeriod`: (default: `1 year`) How long in miliseconds that you want to cache the CSS and JS when `developmentMode: false`.\n- `middleware`: An object with `js`, `css`, and/or `html` properties. Each can be a single function or an array of functions and will be used as middleware for that particular route. See the [Express routing documentation](http://expressjs.com/3x/api.html#app.VERB) for more information.\n- `render`: A function with the signature `(req, res)` that will be called to set the response of the HTML route. It will have `resourcePrefix`, `cssFileName`, and `jsFileName` set on `res.locals`. By default this will just do `res.send` with the [default Moonboots HTML source](https://github.com/HenrikJoreteg/moonboots/blob/master/index.js#L176-L180).\n- `moonboots`: This is an object that is passed directly to [Moonboots](https://github.com/HenrikJoreteg/moonboots). See the [documentation](https://github.com/HenrikJoreteg/moonboots#options) for what options are available.\n\n\n## What's happening?\n\n`moonboots-express` is doing a few things for you:\n\n1. Create a `GET` route for your app's HTML at `options.appPath` with the correct contentType\n2. Create a `GET` route for your app's JS (and CSS if necessary) with the correct contentType\n3. If you are in `developmentMode` your JS/CSS will be re-bundled on each request\n4. If you are not in `developmentMode` your JS/CSS will be cached and the cache-control headers will be set to `cachePeriod`\n5. Any requests made before moonboots is ready (which can happen if you're doing complex things in the `beforeBuild` functions) will wait for it to be ready before they are served. If you want an example of this, run `node sample/server --complex` and make a request to `http://localhost:3001`. The request will wait ~5 seconds before completing, but any subsequent requests will be instant.\n\n\n## HTML Route Rendering\n\nIf you don't want your HTML to be the default content served by Moonboots you can use the `render` option. Here's an example where a jade file is rendered using the variables from `res.locals`.\n\n**views/index.jade**\n```jade\ndoctype html\nhtml\n  head\n    link(rel='stylesheet', href=locals.resourcePrefix + locals.cssFileName)\n    script(src=locals.resourcePrefix + locals.jsFileName)\n```\n\n**server.js**\n```js\nvar express = require('express');\nvar Moonboots = require('moonboots-express');\nvar app = express();\n\napp.set('views', __dirname + '/views');\napp.set('view engine', 'jade');\n\nvar moonboots = new Moonboots({\n    moonboots: {\n        main: __dirname + '/clientapp/app.js',\n        resourcePrefix: '/assets/'\n    },\n    server: app,\n    render: function (req, res) {\n        // necessary res.locals are set by moonboots-express\n        res.render('index');\n    }\n});\n```\n\n\n## Configuring Express\n\n### Routes\n\nYou should almost always set your routes **before** creating your `moonboots-express` instance. This is because the default `appPath` is `*`, so this route will take precedence over anything created after it. Here's an example of a **Bad Idea**:\n\n```js\nvar express = require('express');\nvar Moonboots = require('moonboots-express');\nvar app = express();\n\n// The route should go here\n\nnew Moonboots({\n    moonboots: { main: __dirname + '/clientapp/app.js' },\n    server: app\n});\n\napp.get('/my-static-page', function (req, res) {\n    // Whoops, this is unreachable!\n});\n```\n\n### Middleware\n\nSince `moonboots-express` is just attaching a few routes to your server, you can use `app.use` as you normally would to set Express middleware functions. Here's an example where a header is set for all routes, including the ones created by `moonboots-express`.\n\n```js\nvar express = require('express');\nvar Moonboots = require('moonboots-express');\nvar app = express();\n\napp.use('*', function (req, res, next) {\n    res.set('my-special-header', 'header-content');\n    next();\n});\n\nnew Moonboots({\n    moonboots: { main: __dirname + '/clientapp/app.js' },\n    server: app\n});\n```\n\nIf you want to run route specific middleware use the `middleware` config option. Here's an example where a different header is set for each route:\n\n```js\nvar express = require('express');\nvar Moonboots = require('moonboots-express');\nvar app = express();\n\nnew Moonboots({\n    moonboots: { main: mainSample },\n    server: app,\n    middleware: {\n        html: function (req, res, next) {\n            res.set('my-special-html-header', 'header-content');\n            next();\n        },\n        css: function (req, res, next) {\n            res.set('my-special-css-header', 'header-content');\n            next();\n        },\n        js: function (req, res, next) {\n            res.set('my-special-js-header', 'header-content');\n            next();\n        }\n    }\n});\n```\n\n## Logging\n\n`moonboots-express` will emit all the same log events that `moonboots` does, so if you wanted to log everything from Moonboots you could do:\n\n```js\nvar Moonboots = require('moonboots-express');\nvar moonboots = new Moonboots(options);\n\nmoonboots.on('log', console.log);\n```\n\n## Test\n\nRun `npm test`\n\n## Sample\n\nRun `npm start` and make sure you have a grey (`#ccc`) background and the `Woo! View source to see what rendered me.` message in your window.\n\n#License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "moonboots-express@0.1.2",
  "dist": {
    "shasum": "bfde3b290324c69479d2b8aff24711c9779beb0e"
  },
  "_from": "moonboots-express@^0.1.1",
  "_resolved": "https://registry.npmjs.org/moonboots-express/-/moonboots-express-0.1.2.tgz"
}
