{
  "author": {
    "name": "David Wee",
    "email": "rook2pawn@gmail.com",
    "url": "http://rook2pawn.com"
  },
  "name": "partial",
  "description": "partial function application - transform f into its partial by partial(f)",
  "version": "0.0.3",
  "homepage": "https://github.com/rook2pawn/node-partial",
  "repository": {
    "type": "git",
    "url": "git://github.com/rook2pawn/node-partial.git"
  },
  "main": "index.js",
  "dependencies": {},
  "devDependencies": {},
  "readme": "partial\n=======\n\nis simple to use\n\n\tvar partial = require('partial');\n\tvar foo = function(x,y,z) { return (x*y) + z }\n\t\n\tvar bar = partial(foo);\n\nand we're done! Now we can simply say\n\n\tbar(2,3)(4); // 10\n\tbar(2)(3,4); // 10\n\t\n\tvar fix = bar(2,3); \n\tfix(4); // 10\n\t\n\nusage\n-----\nSimply pass any function to partial, and if you wish, any arguments you want to fix.\n\n\tvar bar = partial(foo);\n\tvar baz = bar(2,3);\n\nis identical to\n\n\tvar baz2 = partial(foo,2,3);\n\t\n\nboth can be used like so:\n\n\tbaz(4); // 10\n\tbaz2(4); // 10\n\nRight side partial function application is through .rapply i.e.\n\n\tvar bar = partial.rapply(foo);\n\tvar baz = bar(3,7); // y = 3, z = 7\n\t\n\tbaz(2); // (2*3) + 7 = 13\n\npartial was inspired (and partially lifted) by [partial/curry library ap - substack](https://github.com/substack/node-ap)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/rook2pawn/node-partial/issues"
  },
  "_id": "partial@0.0.3",
  "dist": {
    "shasum": "c9e114398440c13c97d7e39a0d5b6db905fc5d31"
  },
  "_from": "partial@^0.0.3",
  "_resolved": "https://registry.npmjs.org/partial/-/partial-0.0.3.tgz"
}
