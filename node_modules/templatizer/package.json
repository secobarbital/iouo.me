{
  "name": "templatizer",
  "description": "Simple solution for compiling jade templates into vanilla JS functions for blazin' fast client-side use.",
  "version": "0.3.6",
  "author": {
    "name": "Henrik Joreteg",
    "email": "henrik@andyet.net"
  },
  "bin": {
    "templatizer": "./bin/cli"
  },
  "bugs": {
    "url": "https://github.com/HenrikJoreteg/templatizer/issues"
  },
  "contributors": [
    {
      "name": "Beau Sorensen",
      "email": "mail@beausorensen.com"
    },
    {
      "name": "Luke Karrys",
      "email": "luke@andyet.net"
    }
  ],
  "dependencies": {
    "escodegen": "0.0.26",
    "esprima": "^1.2.1",
    "falafel": "^0.3.1",
    "jade": "^1.3.0",
    "minimist": "^0.1.0",
    "uglify-js": "^2.4.0",
    "underscore": "^1.5.1",
    "walkdir": "0.0.7"
  },
  "devDependencies": {
    "browserify": "^3.43.0",
    "colors": "^0.6.0",
    "jshint": "^2.5.0",
    "precommit-hook": "^0.4.1",
    "yetify": "0.1.0"
  },
  "homepage": "https://github.com/HenrikJoreteg/templatizer",
  "keywords": [
    "templates",
    "browser",
    "jade"
  ],
  "license": "MIT",
  "main": "templatizer.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/HenrikJoreteg/templatizer.git"
  },
  "scripts": {
    "copy-runtime": "cp node_modules/jade/lib/runtime.js jaderuntime.js",
    "benchmark": "node benchmark/speedtest.js",
    "build": "npm run runtime && node benchmark/build-demo.js",
    "browserify": "browserify test/browserify-test.js > test/tests-bundle.js",
    "test": "npm run build && npm run browserify && npm run viewtest",
    "viewtest": "open ./test/index.html && open ./test/browserify.html"
  },
  "readme": "# templatizer.js\n\nSimple solution for compiling jade templates into vanilla JS functions for blazin' fast client-side use.\n\n## What is this?\n\nClient-side templating is overly complicated, ultimately what you *actually* want is a function you can call from your JS that puts your data in a template. Why should I have to send a bunch of strings with Mustaches `{{}}` or other silly stuff for the client to parse? Ultimately, all I want is a function that I can call with some variable to render the string I want.\n\nSo, the question is, what's a sane way to get to that point? Enter [jade](http://jade-lang.com). Simple, intuitive templating, and happens to be what I use on the server anyway. So... Jade has some awesome stuff for compiling templates into functions. I just built templatizer to make it easy to turn a folder full of jade templates into a CommonJS module that exports all the template functions by whatever their file name.\n\n## Is it faster?\nFrom my tests it's 6 to 10 times faster than mustache.js with ICanHaz.\n\n## How do I use it?\n\n1. `npm install templatizer`\n1. Write all your templates as individual jade files in a folder in your project.\n1. Somewhere in your build process do this:\n    \n```js\nvar templatizer = require('templatizer');\n\n// pass in the template directory and what you want to \n// save the output file as. That's it!\ntemplatizer(__dirname + '/templates', __dirname + '/demo_output.js', options);\n```\n\nSo a folder like this\n\n```\n/clienttemplates\n   user.jade\n   app.jade\n   /myfolder\n     nestedTemplate.jade\n```\n\nCompiles down to a JS file that looks something like this:\n\n```js\n// here's about 2k worth of utils that jade uses to DRY up the template code a bit. \n// Includes some basic shims for Object.keys, etc.\nvar jade=function(exports){ ... }\n\n// a function built from the `user.jade` file\n// that takes your data and returns a string.\nexports.user = function () {} \n\n// built from the `app.jade` file\nexports.app = function () {} // the function \n\n// folders become nested objects so \n// myfolder/nestedTemplate.jade becomes\nexports.myfolder.nestedTemplate = function () {} // the template function\n\n// etc. etc\n```\n\nThe awesome thing is... there are no external dependencies because they're just functions at this point. Crazy fast, SO MUCH WIN!!!!\n\n### Options\n\nThe third parameter passed to `templatizer` is an options object.\n\nCurrently the only available option is `jade`, which is an object which will be passed directly to `jade.compile()`. See the [Jade API documentation](http://jade-lang.com/api/) for what options are available.\n\nHere's an example where we set the Jade `compileDebug` option to `true`.\n\n```js\ntemplatizer(templatesDir, outputFile, {\n    // Options\n    jade: {\n        compileDebug: true\n    }\n});\n```\n\n### Mixin Support\n\nJade has a feature called `mixins` which when compiled get treated as function declarations within the compiled function. Templatizer pulls these out of the compiled function and places them on the namespace of the parent function. For example:\n\n```jade\n// users.jade\nul\n    each user in users\n        mixin user(user)\n\nmixin user(user)\n    // Jade mixin content\n```\n\nTemplatizer will compile this as\n\n```js\n// Compiled fn from file\nexports.users = function () {}\n\n// Compiled mixin fn\nexports.users.user = function (user) {}\n```\n\nThis is helpful as it allows you to call `users()` to create your list and then `users.user()` to render just a single item in the list.\n\n## CLI\n\nTemplatizer comes with a bin script to use from makefiles/package.json scripts/etc, it works like this: \n\n```\n$ templatizer -d path/to/templates -o /path/to/output/templates.js\n```\n\n## Sample?\n\nCheck out the `tests/demo_output.js` file for... err... demo output built from the `templates` directory in this project.\n\n## Changelog\n\n- v0.2.9 [diff](https://github.com/henrikjoreteg/templatizer/compare/v0.2.8...v0.2.9) - Adding path normalize to avoid issues if passing in paths like `/thing/../otherfolder`.\n\n## License\n\nMIT\n\n## Contributors\n\n- Aaron McCall [github profile](https://github.com/aaronmccall)\n- Luke Karrys [github profile](https://github.com/lukekarrys)\n\nIf you think this is cool, you should follow me on twitter: [@HenrikJoreteg](http://twitter.com/henrikjoreteg)\n",
  "readmeFilename": "README.md",
  "_id": "templatizer@0.3.6",
  "dist": {
    "shasum": "d28f9a8f6163d50684ffa614b1cf4acca7712174"
  },
  "_from": "templatizer@^0.3.5",
  "_resolved": "https://registry.npmjs.org/templatizer/-/templatizer-0.3.6.tgz"
}
